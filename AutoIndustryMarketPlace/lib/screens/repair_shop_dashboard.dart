import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:auto_industry/provider/auth_provider.dart';
import 'package:auto_industry/services/api_service.dart';
import 'package:auto_industry/services/websocket_service.dart';
import 'package:auto_industry/models/request.dart';
import 'package:auto_industry/models/quote.dart';
import 'package:auto_industry/models/part.dart';

class RepairShopDashboard extends StatefulWidget {
  const RepairShopDashboard({super.key});

  @override
  State<RepairShopDashboard> createState() => _RepairShopDashboardState();
}

class _RepairShopDashboardState extends State<RepairShopDashboard> {
  List<RepairRequest> _requests = [];
  List<Part> _parts = [];
  late WebSocketService _wsService;
  late Stream<dynamic> _wsStream;
  final _requestIdController = TextEditingController();
  final _breakdownController = TextEditingController(); // JSON-like string for breakdown
  final _hoursController = TextEditingController();
  final _totalController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _loadRequests();
    _wsService = WebSocketService();
    _wsStream = _wsService.connect();
    _wsService.subscribeToTopic('/topic/inventory');
    _wsStream.listen((data) {
      final json = jsonDecode(data);
      if (json['type'] == 'part') {
        setState(() => _parts = (json['data'] as List).map((p) => Part.fromJson(p)).toList());
      }
    });
    _loadParts();
  }

  Future<void> _loadRequests() async {
    final api = ApiService();
    _requests = await api.getRequests();
    setState(() {});
  }

  Future<void> _loadParts() async {
    final api = ApiService();
    _parts = await api.getParts();
    setState(() {});
  }

  @override
  void dispose() {
    _wsService.disconnect();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final auth = Provider.of<AuthProvider>(context);
    return Scaffold(
      appBar: AppBar(
        title: const Text('Repair Shop Dashboard'),
        actions: [
          IconButton(
            icon: const Icon(Icons.logout),
            onPressed: () => auth.logout(context),
          ),
        ],
      ),
      body: SingleChildScrollView(
        child: Column(
          children: [
            const Text('Available Requests'),
            ListView.builder(
              shrinkWrap: true,
              itemCount: _requests.length,
              itemBuilder: (context, index) {
                final req = _requests[index];
                return ListTile(
                  title: Text(req.description),
                  subtitle: Text('${req.carBrand} ${req.carModel} (${req.year})'),
                );
              },
            ),
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                children: [
                  const Text('Submit Quote'),
                  TextField(controller: _requestIdController, decoration: const InputDecoration(labelText: 'Request ID')),
                  TextField(controller: _breakdownController, decoration: const InputDecoration(labelText: 'Price Breakdown (JSON: {"item": price})')),
                  TextField(controller: _hoursController, decoration: const InputDecoration(labelText: 'Estimated Hours'), keyboardType: TextInputType.number),
                  TextField(controller: _totalController, decoration: const InputDecoration(labelText: 'Total Price'), keyboardType: TextInputType.number),
                  ElevatedButton(
                    onPressed: () async {
                      final breakdown = jsonDecode(_breakdownController.text) as Map<String, dynamic>;
                      final quote = Quote(
                        id: '', // Generated by backend
                        repairShopId: auth.user!.id,
                        requestId: _requestIdController.text,
                        priceBreakdown: breakdown.map((key, value) => MapEntry(key, value.toDouble())),
                        estimatedHours: double.parse(_hoursController.text),
                        totalPrice: double.parse(_totalController.text),
                      );
                      final api = ApiService();
                      await api.submitQuote(quote);
                      // Clear fields
                      _requestIdController.clear();
                      _breakdownController.clear();
                      _hoursController.clear();
                      _totalController.clear();
                    },
                    child: const Text('Submit'),
                  ),
                ],
              ),
            ),
            const Text('Real-time Inventory'),
            ListView.builder(
              shrinkWrap: true,
              itemCount: _parts.length,
              itemBuilder: (context, index) {
                final part = _parts[index];
                return ListTile(
                  title: Text(part.name),
                  subtitle: Text('Category: ${part.category} - Price: \$${part.price} - Stock: ${part.stock}'),
                );
              },
            ),
          ],
        ),
      ),
    );
  }
}