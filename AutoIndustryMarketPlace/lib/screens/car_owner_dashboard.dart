import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:auto_industry/provider/auth_provider.dart';
import 'package:auto_industry/services/api_service.dart';
import 'package:auto_industry/services/websocket_service.dart';
import 'package:auto_industry/models/request.dart';
import 'package:auto_industry/models/quote.dart';
import 'package:auto_industry/models/part.dart';

class CarOwnerDashboard extends StatefulWidget {
  const CarOwnerDashboard({super.key});

  @override
  State<CarOwnerDashboard> createState() => _CarOwnerDashboardState();
}

class _CarOwnerDashboardState extends State<CarOwnerDashboard> {
  final _descriptionController = TextEditingController();
  final _brandController = TextEditingController();
  final _modelController = TextEditingController();
  final _yearController = TextEditingController();
  final _partsController = TextEditingController(); // Comma-separated
  List<Quote> _quotes = [];
  List<Part> _parts = [];
  late WebSocketService _wsService;
  late Stream<dynamic> _wsStream;

  @override
  void initState() {
    super.initState();
    _wsService = WebSocketService();
    _wsStream = _wsService.connect();
    _wsService.subscribeToTopic('/topic/quotes');
    _wsService.subscribeToTopic('/topic/inventory');
    _wsStream.listen((data) {
      // Parse JSON and update _quotes or _parts
      final json = jsonDecode(data);
      if (json['type'] == 'quote') {
        setState(() => _quotes.add(Quote.fromJson(json['data'])));
      } else if (json['type'] == 'part') {
        setState(() => _parts = (json['data'] as List).map((p) => Part.fromJson(p)).toList());
      }
    });
    _loadParts();
  }

  Future<void> _loadParts() async {
    final api = ApiService();
    _parts = await api.getParts();
    setState(() {});
  }

  @override
  void dispose() {
    _wsService.disconnect();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final auth = Provider.of<AuthProvider>(context);
    return Scaffold(
      appBar: AppBar(
        title: const Text('Car Owner Dashboard'),
        actions: [
          IconButton(
            icon: const Icon(Icons.logout),
            onPressed: () => auth.logout(context),
          ),
        ],
      ),
      body: SingleChildScrollView(
        child: Column(
          children: [
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                children: [
                  const Text('Submit Repair Request'),
                  TextField(controller: _descriptionController, decoration: const InputDecoration(labelText: 'Description')),
                  TextField(controller: _brandController, decoration: const InputDecoration(labelText: 'Car Brand')),
                  TextField(controller: _modelController, decoration: const InputDecoration(labelText: 'Car Model')),
                  TextField(controller: _yearController, decoration: const InputDecoration(labelText: 'Year'), keyboardType: TextInputType.number),
                  TextField(controller: _partsController, decoration: const InputDecoration(labelText: 'Parts Needed (comma-separated)')),
                  ElevatedButton(
                    onPressed: () async {
                      final request = RepairRequest(
                        id: '', // Generated by backend
                        ownerId: auth.user!.id,
                        description: _descriptionController.text,
                        carBrand: _brandController.text,
                        carModel: _modelController.text,
                        year: int.parse(_yearController.text),
                        partsNeeded: _partsController.text.split(',').map((p) => p.trim()).toList(),
                      );
                      final api = ApiService();
                      await api.submitRequest(request);
                      // Clear fields
                      _descriptionController.clear();
                      _brandController.clear();
                      _modelController.clear();
                      _yearController.clear();
                      _partsController.clear();
                    },
                    child: const Text('Submit'),
                  ),
                ],
              ),
            ),
            const Text('Real-time Quotes'),
            ListView.builder(
              shrinkWrap: true,
              itemCount: _quotes.length,
              itemBuilder: (context, index) {
                final quote = _quotes[index];
                return ListTile(
                  title: Text('Quote ID: ${quote.id} - Total: \$${quote.totalPrice}'),
                  subtitle: Text('Hours: ${quote.estimatedHours}'),
                );
              },
            ),
            const Text('Inventory'),
            ListView.builder(
              shrinkWrap: true,
              itemCount: _parts.length,
              itemBuilder: (context, index) {
                final part = _parts[index];
                return ListTile(
                  title: Text(part.name),
                  subtitle: Text('Category: ${part.category} - Price: \$${part.price} - Stock: ${part.stock}'),
                );
              },
            ),
          ],
        ),
      ),
    );
  }
}